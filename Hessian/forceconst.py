"""
Calculate Columbus7 MRCI energy Hessian
This is a finite difference calculation from MRCI analytical gradients
"""

''' Library '''
import argparse
from pathlib import Path
import numpy

def parse_args() -> argparse.Namespace: # Command line input
    parser = argparse.ArgumentParser(__doc__)
    parser.add_argument('DISPLACEMENTPath',type=Path,help='location of DISPLACEMENT directory generated by colinp')
    parser.add_argument('NState',type=int,help='Calculate for state 1 to NState')
    args = parser.parse_args()
    return args

if __name__ == "__main__":
    # Initialize
    args = parse_args()
    listings=args.DISPLACEMENTPath/'..'/'LISTINGS'
    if not listings.exists(): listings.mkdir()
    with open(args.DISPLACEMENTPath/'displfl','r') as f:
        data=f.readlines()
        temp=data[0].split(); intdim=int(temp[0])
        displ=numpy.empty((intdim,2))
        for i in range(intdim):
            temp=data[3+2*i].split()  ; displ[i,0]=float(temp[1])
            temp=data[3+2*i+1].split(); displ[i,1]=float(temp[1])
    # Read internal coordinate analytical gradients
    intgrad=numpy.empty((intdim,2,args.NState,intdim))
    for i in range(intdim):
        for ii in range(2):
            current=Path(args.DISPLACEMENTPath/('CALC.c'+str(i+1)+'.d'+str(displ[i,ii])))
            for j in range(args.NState):
                with open(current/'GRADIENTS'/('intgrd.drt1.state'+str(j+1)+'.sp'),'r') as f: data=f.readlines()
                for k in range(intdim): intgrad[i,ii,j,k]=float(data[k])
    # Perform finite difference
    hessian=numpy.empty((args.NState,intdim,intdim))
    for istate in range(args.NState):
        for idim in range(intdim):
            hessian[istate,idim,:]=(intgrad[idim,1,istate,:]-intgrad[idim,0,istate,:])/(displ[idim,1]-displ[idim,0])
    # Output hessian
    for istate in range(args.NState):
        with open(listings/('hessian'+str(istate+1)),'w') as f:
            for i in range(intdim):
                for j in range(0,intdim,8):
                    jstart=j
                    jstop=j+8
                    if jstop>intdim: jstop=intdim
                    for jj in range(jstart,jstop):
                        print('%13.6f' % hessian[istate,i,jj],end='',file=f)
                    print(file=f)
